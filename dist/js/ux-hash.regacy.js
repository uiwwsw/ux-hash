"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var UxHash =
/*#__PURE__*/
function () {
  function UxHash(querySelector, themes) {
    _classCallCheck(this, UxHash);

    this.id = Math.random().toString(36).substr(2, 9);
    this.querySelector = querySelector;
    this.keys = themes.map(function (theme) {
      return theme.key;
    });
    this.colors = themes.map(function (theme) {
      return theme.color;
    });
    this.bgs = themes.map(function (theme) {
      return theme.bg;
    });
    this.wrapperElement = document.querySelector(this.querySelector);
    this.textareaElement = document.createElement('textarea');
    this.displayElement = document.createElement('div');
    this.makeStyle();
    this.wrapperElement.appendChild(this.textareaElement);
    this.wrapperElement.appendChild(this.displayElement);
    this.displayElement.style.right = this.textareaElement.scrollWidth - this.textareaElement.clientWidth + 'px';
    this.textareaElement.onkeyup = this.keyEvent.bind(this);
    this.textareaElement.onscroll = this.scrollEvent.bind(this);
  }

  _createClass(UxHash, [{
    key: "makeStyle",
    value: function makeStyle() {
      var commonStyle = 'overflow: auto;overflow-x: hidden;display: block !important;height: 100%;margin: 0;padding: 1em;box-sizing: border-box;border: 0;line-height: inherit;word-spacing: inherit;color: inherit;font: inherit;resize: none;outline: none;word-break: initial;white-space: pre-wrap;';
      this.wrapperElement.style.position = 'relative';
      this.wrapperElement.style.fontSize = '12px';
      this.textareaElement.setAttribute('style', commonStyle + 'width: 100%;');
      this.displayElement.setAttribute('style', commonStyle + 'z-index:2;position: absolute;top: 0;right: 0;left: 0;overflow: hidden;color: transparent;pointer-events: none;');
    }
  }, {
    key: "scrollEvent",
    value: function scrollEvent() {
      this.displayElement.scrollTop = this.textareaElement.scrollTop;
      this.textareaElement.scrollTop = this.displayElement.scrollTop;
    }
  }, {
    key: "mask",
    value: function mask() {
      var _this = this;

      var res = '';
      this.textareaElement.value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").split('\n').forEach(function (line, i) {
        res += i === 0 ? '' : '\n';
        line.split(' ').forEach(function (word, j) {
          res += j === 0 ? '' : ' ';

          var index = _this.keys.indexOf(word[0]);

          if (index === -1) {
            res += word;
          } else {
            res += "<span style=\"margin: -.1em;padding: 0 .1em;border-radius: 1em;color:".concat(_this.colors[index], ";background:").concat(_this.bgs[index], ";\">").concat(word, "</span>");
          }
        });
      });
      return res + '\n\n';
    }
  }, {
    key: "keyEvent",
    value: function keyEvent() {
      this.displayElement.innerHTML = this.mask();
      this.scrollEvent();
    }
  }], [{
    key: "keyEvent",
    value: function keyEvent(querySelector, themes) {
      var wrapperElement = document.querySelector(querySelector);
      var textareaElement = wrapperElement.querySelector('textarea');
      var displayElement = wrapperElement.querySelector('div');
      var value = wrapperElement.querySelector('textarea').value;
      var keys = themes.map(function (theme) {
        return theme.key;
      });
      var colors = themes.map(function (theme) {
        return theme.color;
      });
      var bgs = themes.map(function (theme) {
        return theme.bg;
      });
      var res = '';
      value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").split('\n').forEach(function (line, i) {
        res += i === 0 ? '' : '\n';
        line.split(' ').forEach(function (word, j) {
          res += j === 0 ? '' : ' ';
          var index = keys.indexOf(word[0]);

          if (index === -1) {
            res += word;
          } else {
            res += "<span style=\"margin: -.1em;padding: 0 .1em;border-radius: 1em;color:".concat(colors[index], ";background:").concat(bgs[index], ";\">").concat(word, "</span>");
          }
        });
      });
      displayElement.scrollTop = textareaElement.scrollTop;
      textareaElement.scrollTop = displayElement.scrollTop;
      displayElement.innerHTML = res + '\n\n';
    }
  }]);

  return UxHash;
}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
